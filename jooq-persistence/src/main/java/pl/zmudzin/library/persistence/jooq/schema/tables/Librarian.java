/*
 * This file is generated by jOOQ.
 */
package pl.zmudzin.library.persistence.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.zmudzin.library.persistence.jooq.schema.Keys;
import pl.zmudzin.library.persistence.jooq.schema.Public;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.LibrarianRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Librarian extends TableImpl<LibrarianRecord> {

    private static final long serialVersionUID = 193390143;

    /**
     * The reference instance of <code>public.librarian</code>
     */
    public static final Librarian LIBRARIAN = new Librarian();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LibrarianRecord> getRecordType() {
        return LibrarianRecord.class;
    }

    /**
     * The column <code>public.librarian.id</code>.
     */
    public final TableField<LibrarianRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.librarian.account_id</code>.
     */
    public final TableField<LibrarianRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.librarian</code> table reference
     */
    public Librarian() {
        this(DSL.name("librarian"), null);
    }

    /**
     * Create an aliased <code>public.librarian</code> table reference
     */
    public Librarian(String alias) {
        this(DSL.name(alias), LIBRARIAN);
    }

    /**
     * Create an aliased <code>public.librarian</code> table reference
     */
    public Librarian(Name alias) {
        this(alias, LIBRARIAN);
    }

    private Librarian(Name alias, Table<LibrarianRecord> aliased) {
        this(alias, aliased, null);
    }

    private Librarian(Name alias, Table<LibrarianRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Librarian(Table<O> child, ForeignKey<O, LibrarianRecord> key) {
        super(child, key, LIBRARIAN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LibrarianRecord> getPrimaryKey() {
        return Keys.LIBRARIAN_PKEY;
    }

    @Override
    public List<UniqueKey<LibrarianRecord>> getKeys() {
        return Arrays.<UniqueKey<LibrarianRecord>>asList(Keys.LIBRARIAN_PKEY);
    }

    @Override
    public List<ForeignKey<LibrarianRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LibrarianRecord, ?>>asList(Keys.LIBRARIAN__FK_ACCOUNT);
    }

    public Account account() {
        return new Account(this, Keys.LIBRARIAN__FK_ACCOUNT);
    }

    @Override
    public Librarian as(String alias) {
        return new Librarian(DSL.name(alias), this);
    }

    @Override
    public Librarian as(Name alias) {
        return new Librarian(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Librarian rename(String name) {
        return new Librarian(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Librarian rename(Name name) {
        return new Librarian(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
