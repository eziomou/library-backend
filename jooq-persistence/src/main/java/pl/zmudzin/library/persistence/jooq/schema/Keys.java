/*
 * This file is generated by jOOQ.
 */
package pl.zmudzin.library.persistence.jooq.schema;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;

import pl.zmudzin.library.persistence.jooq.schema.tables.Account;
import pl.zmudzin.library.persistence.jooq.schema.tables.Author;
import pl.zmudzin.library.persistence.jooq.schema.tables.Book;
import pl.zmudzin.library.persistence.jooq.schema.tables.Genre;
import pl.zmudzin.library.persistence.jooq.schema.tables.Librarian;
import pl.zmudzin.library.persistence.jooq.schema.tables.Loan;
import pl.zmudzin.library.persistence.jooq.schema.tables.Member;
import pl.zmudzin.library.persistence.jooq.schema.tables.Publisher;
import pl.zmudzin.library.persistence.jooq.schema.tables.Rating;
import pl.zmudzin.library.persistence.jooq.schema.tables.Reservation;
import pl.zmudzin.library.persistence.jooq.schema.tables.ReservationEvent;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.AccountRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.AuthorRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.BookRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.GenreRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.LibrarianRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.LoanRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.MemberRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.PublisherRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.RatingRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.ReservationEventRecord;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.ReservationRecord;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>public</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = UniqueKeys0.ACCOUNT_PKEY;
    public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = UniqueKeys0.AUTHOR_PKEY;
    public static final UniqueKey<BookRecord> BOOK_PKEY = UniqueKeys0.BOOK_PKEY;
    public static final UniqueKey<GenreRecord> GENRE_PKEY = UniqueKeys0.GENRE_PKEY;
    public static final UniqueKey<LibrarianRecord> LIBRARIAN_PKEY = UniqueKeys0.LIBRARIAN_PKEY;
    public static final UniqueKey<LoanRecord> LOAN_PKEY = UniqueKeys0.LOAN_PKEY;
    public static final UniqueKey<MemberRecord> MEMBER_PKEY = UniqueKeys0.MEMBER_PKEY;
    public static final UniqueKey<PublisherRecord> PUBLISHER_PKEY = UniqueKeys0.PUBLISHER_PKEY;
    public static final UniqueKey<RatingRecord> RATING_PKEY = UniqueKeys0.RATING_PKEY;
    public static final UniqueKey<ReservationRecord> RESERVATION_PKEY = UniqueKeys0.RESERVATION_PKEY;
    public static final UniqueKey<ReservationEventRecord> RESERVATION_EVENT_PKEY = UniqueKeys0.RESERVATION_EVENT_PKEY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_AUTHOR = ForeignKeys0.BOOK__FK_AUTHOR;
    public static final ForeignKey<BookRecord, GenreRecord> BOOK__FK_GENRE = ForeignKeys0.BOOK__FK_GENRE;
    public static final ForeignKey<BookRecord, PublisherRecord> BOOK__FK_PUBLISHER = ForeignKeys0.BOOK__FK_PUBLISHER;
    public static final ForeignKey<LibrarianRecord, AccountRecord> LIBRARIAN__FK_ACCOUNT = ForeignKeys0.LIBRARIAN__FK_ACCOUNT;
    public static final ForeignKey<LoanRecord, MemberRecord> LOAN__FK_LOAN_MEMBER = ForeignKeys0.LOAN__FK_LOAN_MEMBER;
    public static final ForeignKey<LoanRecord, BookRecord> LOAN__FK_LOAN_BOOK = ForeignKeys0.LOAN__FK_LOAN_BOOK;
    public static final ForeignKey<MemberRecord, AccountRecord> MEMBER__FK_ACCOUNT = ForeignKeys0.MEMBER__FK_ACCOUNT;
    public static final ForeignKey<RatingRecord, MemberRecord> RATING__FK_RATING_MEMBER = ForeignKeys0.RATING__FK_RATING_MEMBER;
    public static final ForeignKey<RatingRecord, BookRecord> RATING__FK_RATING_BOOK = ForeignKeys0.RATING__FK_RATING_BOOK;
    public static final ForeignKey<ReservationRecord, MemberRecord> RESERVATION__FK_RESERVATION_MEMBER = ForeignKeys0.RESERVATION__FK_RESERVATION_MEMBER;
    public static final ForeignKey<ReservationRecord, BookRecord> RESERVATION__FK_RESERVATION_BOOK = ForeignKeys0.RESERVATION__FK_RESERVATION_BOOK;
    public static final ForeignKey<ReservationEventRecord, ReservationRecord> RESERVATION_EVENT__FK_RESERVATION_EVENT_RESERVATION = ForeignKeys0.RESERVATION_EVENT__FK_RESERVATION_EVENT_RESERVATION;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 {
        public static final UniqueKey<AccountRecord> ACCOUNT_PKEY = Internal.createUniqueKey(Account.ACCOUNT, "account_pkey", new TableField[] { Account.ACCOUNT.ID }, true);
        public static final UniqueKey<AuthorRecord> AUTHOR_PKEY = Internal.createUniqueKey(Author.AUTHOR, "author_pkey", new TableField[] { Author.AUTHOR.ID }, true);
        public static final UniqueKey<BookRecord> BOOK_PKEY = Internal.createUniqueKey(Book.BOOK, "book_pkey", new TableField[] { Book.BOOK.ID }, true);
        public static final UniqueKey<GenreRecord> GENRE_PKEY = Internal.createUniqueKey(Genre.GENRE, "genre_pkey", new TableField[] { Genre.GENRE.ID }, true);
        public static final UniqueKey<LibrarianRecord> LIBRARIAN_PKEY = Internal.createUniqueKey(Librarian.LIBRARIAN, "librarian_pkey", new TableField[] { Librarian.LIBRARIAN.ID }, true);
        public static final UniqueKey<LoanRecord> LOAN_PKEY = Internal.createUniqueKey(Loan.LOAN, "loan_pkey", new TableField[] { Loan.LOAN.ID }, true);
        public static final UniqueKey<MemberRecord> MEMBER_PKEY = Internal.createUniqueKey(Member.MEMBER, "member_pkey", new TableField[] { Member.MEMBER.ID }, true);
        public static final UniqueKey<PublisherRecord> PUBLISHER_PKEY = Internal.createUniqueKey(Publisher.PUBLISHER, "publisher_pkey", new TableField[] { Publisher.PUBLISHER.ID }, true);
        public static final UniqueKey<RatingRecord> RATING_PKEY = Internal.createUniqueKey(Rating.RATING, "rating_pkey", new TableField[] { Rating.RATING.ID }, true);
        public static final UniqueKey<ReservationRecord> RESERVATION_PKEY = Internal.createUniqueKey(Reservation.RESERVATION, "reservation_pkey", new TableField[] { Reservation.RESERVATION.ID }, true);
        public static final UniqueKey<ReservationEventRecord> RESERVATION_EVENT_PKEY = Internal.createUniqueKey(ReservationEvent.RESERVATION_EVENT, "reservation_event_pkey", new TableField[] { ReservationEvent.RESERVATION_EVENT.ID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<BookRecord, AuthorRecord> BOOK__FK_AUTHOR = Internal.createForeignKey(Keys.AUTHOR_PKEY, Book.BOOK, "fk_author", new TableField[] { Book.BOOK.AUTHOR_ID }, true);
        public static final ForeignKey<BookRecord, GenreRecord> BOOK__FK_GENRE = Internal.createForeignKey(Keys.GENRE_PKEY, Book.BOOK, "fk_genre", new TableField[] { Book.BOOK.GENRE_ID }, true);
        public static final ForeignKey<BookRecord, PublisherRecord> BOOK__FK_PUBLISHER = Internal.createForeignKey(Keys.PUBLISHER_PKEY, Book.BOOK, "fk_publisher", new TableField[] { Book.BOOK.PUBLISHER_ID }, true);
        public static final ForeignKey<LibrarianRecord, AccountRecord> LIBRARIAN__FK_ACCOUNT = Internal.createForeignKey(Keys.ACCOUNT_PKEY, Librarian.LIBRARIAN, "fk_account", new TableField[] { Librarian.LIBRARIAN.ACCOUNT_ID }, true);
        public static final ForeignKey<LoanRecord, MemberRecord> LOAN__FK_LOAN_MEMBER = Internal.createForeignKey(Keys.MEMBER_PKEY, Loan.LOAN, "fk_loan_member", new TableField[] { Loan.LOAN.MEMBER_ID }, true);
        public static final ForeignKey<LoanRecord, BookRecord> LOAN__FK_LOAN_BOOK = Internal.createForeignKey(Keys.BOOK_PKEY, Loan.LOAN, "fk_loan_book", new TableField[] { Loan.LOAN.BOOK_ID }, true);
        public static final ForeignKey<MemberRecord, AccountRecord> MEMBER__FK_ACCOUNT = Internal.createForeignKey(Keys.ACCOUNT_PKEY, Member.MEMBER, "fk_account", new TableField[] { Member.MEMBER.ACCOUNT_ID }, true);
        public static final ForeignKey<RatingRecord, MemberRecord> RATING__FK_RATING_MEMBER = Internal.createForeignKey(Keys.MEMBER_PKEY, Rating.RATING, "fk_rating_member", new TableField[] { Rating.RATING.MEMBER_ID }, true);
        public static final ForeignKey<RatingRecord, BookRecord> RATING__FK_RATING_BOOK = Internal.createForeignKey(Keys.BOOK_PKEY, Rating.RATING, "fk_rating_book", new TableField[] { Rating.RATING.BOOK_ID }, true);
        public static final ForeignKey<ReservationRecord, MemberRecord> RESERVATION__FK_RESERVATION_MEMBER = Internal.createForeignKey(Keys.MEMBER_PKEY, Reservation.RESERVATION, "fk_reservation_member", new TableField[] { Reservation.RESERVATION.MEMBER_ID }, true);
        public static final ForeignKey<ReservationRecord, BookRecord> RESERVATION__FK_RESERVATION_BOOK = Internal.createForeignKey(Keys.BOOK_PKEY, Reservation.RESERVATION, "fk_reservation_book", new TableField[] { Reservation.RESERVATION.BOOK_ID }, true);
        public static final ForeignKey<ReservationEventRecord, ReservationRecord> RESERVATION_EVENT__FK_RESERVATION_EVENT_RESERVATION = Internal.createForeignKey(Keys.RESERVATION_PKEY, ReservationEvent.RESERVATION_EVENT, "fk_reservation_event_reservation", new TableField[] { ReservationEvent.RESERVATION_EVENT.RESERVATION_ID }, true);
    }
}
