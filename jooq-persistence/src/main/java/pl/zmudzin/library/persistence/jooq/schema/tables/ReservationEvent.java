/*
 * This file is generated by jOOQ.
 */
package pl.zmudzin.library.persistence.jooq.schema.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.zmudzin.library.persistence.jooq.schema.Keys;
import pl.zmudzin.library.persistence.jooq.schema.Public;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.ReservationEventRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReservationEvent extends TableImpl<ReservationEventRecord> {

    private static final long serialVersionUID = -1573268601;

    /**
     * The reference instance of <code>public.reservation_event</code>
     */
    public static final ReservationEvent RESERVATION_EVENT = new ReservationEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReservationEventRecord> getRecordType() {
        return ReservationEventRecord.class;
    }

    /**
     * The column <code>public.reservation_event.id</code>.
     */
    public final TableField<ReservationEventRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reservation_event.reservation_id</code>.
     */
    public final TableField<ReservationEventRecord, UUID> RESERVATION_ID = createField(DSL.name("reservation_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reservation_event.reservation_status</code>.
     */
    public final TableField<ReservationEventRecord, String> RESERVATION_STATUS = createField(DSL.name("reservation_status"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.reservation_event.occurrence_date</code>.
     */
    public final TableField<ReservationEventRecord, OffsetDateTime> OCCURRENCE_DATE = createField(DSL.name("occurrence_date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>public.reservation_event</code> table reference
     */
    public ReservationEvent() {
        this(DSL.name("reservation_event"), null);
    }

    /**
     * Create an aliased <code>public.reservation_event</code> table reference
     */
    public ReservationEvent(String alias) {
        this(DSL.name(alias), RESERVATION_EVENT);
    }

    /**
     * Create an aliased <code>public.reservation_event</code> table reference
     */
    public ReservationEvent(Name alias) {
        this(alias, RESERVATION_EVENT);
    }

    private ReservationEvent(Name alias, Table<ReservationEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReservationEvent(Name alias, Table<ReservationEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ReservationEvent(Table<O> child, ForeignKey<O, ReservationEventRecord> key) {
        super(child, key, RESERVATION_EVENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReservationEventRecord> getPrimaryKey() {
        return Keys.RESERVATION_EVENT_PKEY;
    }

    @Override
    public List<UniqueKey<ReservationEventRecord>> getKeys() {
        return Arrays.<UniqueKey<ReservationEventRecord>>asList(Keys.RESERVATION_EVENT_PKEY);
    }

    @Override
    public List<ForeignKey<ReservationEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReservationEventRecord, ?>>asList(Keys.RESERVATION_EVENT__FK_RESERVATION_EVENT_RESERVATION);
    }

    public Reservation reservation() {
        return new Reservation(this, Keys.RESERVATION_EVENT__FK_RESERVATION_EVENT_RESERVATION);
    }

    @Override
    public ReservationEvent as(String alias) {
        return new ReservationEvent(DSL.name(alias), this);
    }

    @Override
    public ReservationEvent as(Name alias) {
        return new ReservationEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReservationEvent rename(String name) {
        return new ReservationEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReservationEvent rename(Name name) {
        return new ReservationEvent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, UUID, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
