/*
 * This file is generated by jOOQ.
 */
package pl.zmudzin.library.persistence.jooq.schema.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.zmudzin.library.persistence.jooq.schema.Keys;
import pl.zmudzin.library.persistence.jooq.schema.Public;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.LoanRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Loan extends TableImpl<LoanRecord> {

    private static final long serialVersionUID = -1212882848;

    /**
     * The reference instance of <code>public.loan</code>
     */
    public static final Loan LOAN = new Loan();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LoanRecord> getRecordType() {
        return LoanRecord.class;
    }

    /**
     * The column <code>public.loan.id</code>.
     */
    public final TableField<LoanRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.loan.member_id</code>.
     */
    public final TableField<LoanRecord, UUID> MEMBER_ID = createField(DSL.name("member_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.loan.book_id</code>.
     */
    public final TableField<LoanRecord, UUID> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.loan.loan_date</code>.
     */
    public final TableField<LoanRecord, OffsetDateTime> LOAN_DATE = createField(DSL.name("loan_date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.loan.due_date</code>.
     */
    public final TableField<LoanRecord, OffsetDateTime> DUE_DATE = createField(DSL.name("due_date"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.loan.returned</code>.
     */
    public final TableField<LoanRecord, Boolean> RETURNED = createField(DSL.name("returned"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.loan</code> table reference
     */
    public Loan() {
        this(DSL.name("loan"), null);
    }

    /**
     * Create an aliased <code>public.loan</code> table reference
     */
    public Loan(String alias) {
        this(DSL.name(alias), LOAN);
    }

    /**
     * Create an aliased <code>public.loan</code> table reference
     */
    public Loan(Name alias) {
        this(alias, LOAN);
    }

    private Loan(Name alias, Table<LoanRecord> aliased) {
        this(alias, aliased, null);
    }

    private Loan(Name alias, Table<LoanRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Loan(Table<O> child, ForeignKey<O, LoanRecord> key) {
        super(child, key, LOAN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LoanRecord> getPrimaryKey() {
        return Keys.LOAN_PKEY;
    }

    @Override
    public List<UniqueKey<LoanRecord>> getKeys() {
        return Arrays.<UniqueKey<LoanRecord>>asList(Keys.LOAN_PKEY);
    }

    @Override
    public List<ForeignKey<LoanRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LoanRecord, ?>>asList(Keys.LOAN__FK_LOAN_MEMBER, Keys.LOAN__FK_LOAN_BOOK);
    }

    public Member member() {
        return new Member(this, Keys.LOAN__FK_LOAN_MEMBER);
    }

    public Book book() {
        return new Book(this, Keys.LOAN__FK_LOAN_BOOK);
    }

    @Override
    public Loan as(String alias) {
        return new Loan(DSL.name(alias), this);
    }

    @Override
    public Loan as(Name alias) {
        return new Loan(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Loan rename(String name) {
        return new Loan(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Loan rename(Name name) {
        return new Loan(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, UUID, OffsetDateTime, OffsetDateTime, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
