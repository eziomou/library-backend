/*
 * This file is generated by jOOQ.
 */
package pl.zmudzin.library.persistence.jooq.schema.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import pl.zmudzin.library.persistence.jooq.schema.tables.Reservation;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReservationRecord extends UpdatableRecordImpl<ReservationRecord> implements Record3<UUID, UUID, UUID> {

    private static final long serialVersionUID = -834452377;

    /**
     * Setter for <code>public.reservation.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.reservation.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.reservation.member_id</code>.
     */
    public void setMemberId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.reservation.member_id</code>.
     */
    public UUID getMemberId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.reservation.book_id</code>.
     */
    public void setBookId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.reservation.book_id</code>.
     */
    public UUID getBookId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Reservation.RESERVATION.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Reservation.RESERVATION.MEMBER_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Reservation.RESERVATION.BOOK_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getMemberId();
    }

    @Override
    public UUID component3() {
        return getBookId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getMemberId();
    }

    @Override
    public UUID value3() {
        return getBookId();
    }

    @Override
    public ReservationRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ReservationRecord value2(UUID value) {
        setMemberId(value);
        return this;
    }

    @Override
    public ReservationRecord value3(UUID value) {
        setBookId(value);
        return this;
    }

    @Override
    public ReservationRecord values(UUID value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReservationRecord
     */
    public ReservationRecord() {
        super(Reservation.RESERVATION);
    }

    /**
     * Create a detached, initialised ReservationRecord
     */
    public ReservationRecord(UUID id, UUID memberId, UUID bookId) {
        super(Reservation.RESERVATION);

        set(0, id);
        set(1, memberId);
        set(2, bookId);
    }
}
