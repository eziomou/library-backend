/*
 * This file is generated by jOOQ.
 */
package pl.zmudzin.library.persistence.jooq.schema.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.zmudzin.library.persistence.jooq.schema.Keys;
import pl.zmudzin.library.persistence.jooq.schema.Public;
import pl.zmudzin.library.persistence.jooq.schema.tables.records.ReservationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reservation extends TableImpl<ReservationRecord> {

    private static final long serialVersionUID = 454311145;

    /**
     * The reference instance of <code>public.reservation</code>
     */
    public static final Reservation RESERVATION = new Reservation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReservationRecord> getRecordType() {
        return ReservationRecord.class;
    }

    /**
     * The column <code>public.reservation.id</code>.
     */
    public final TableField<ReservationRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reservation.member_id</code>.
     */
    public final TableField<ReservationRecord, UUID> MEMBER_ID = createField(DSL.name("member_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reservation.book_id</code>.
     */
    public final TableField<ReservationRecord, UUID> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.reservation</code> table reference
     */
    public Reservation() {
        this(DSL.name("reservation"), null);
    }

    /**
     * Create an aliased <code>public.reservation</code> table reference
     */
    public Reservation(String alias) {
        this(DSL.name(alias), RESERVATION);
    }

    /**
     * Create an aliased <code>public.reservation</code> table reference
     */
    public Reservation(Name alias) {
        this(alias, RESERVATION);
    }

    private Reservation(Name alias, Table<ReservationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reservation(Name alias, Table<ReservationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Reservation(Table<O> child, ForeignKey<O, ReservationRecord> key) {
        super(child, key, RESERVATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ReservationRecord> getPrimaryKey() {
        return Keys.RESERVATION_PKEY;
    }

    @Override
    public List<UniqueKey<ReservationRecord>> getKeys() {
        return Arrays.<UniqueKey<ReservationRecord>>asList(Keys.RESERVATION_PKEY);
    }

    @Override
    public List<ForeignKey<ReservationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReservationRecord, ?>>asList(Keys.RESERVATION__FK_RESERVATION_MEMBER, Keys.RESERVATION__FK_RESERVATION_BOOK);
    }

    public Member member() {
        return new Member(this, Keys.RESERVATION__FK_RESERVATION_MEMBER);
    }

    public Book book() {
        return new Book(this, Keys.RESERVATION__FK_RESERVATION_BOOK);
    }

    @Override
    public Reservation as(String alias) {
        return new Reservation(DSL.name(alias), this);
    }

    @Override
    public Reservation as(Name alias) {
        return new Reservation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservation rename(String name) {
        return new Reservation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reservation rename(Name name) {
        return new Reservation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
